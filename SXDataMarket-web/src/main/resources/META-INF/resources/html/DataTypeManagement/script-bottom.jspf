<script>
$(document).ready(function(){
	
	let SX = StationX(  '<portlet:namespace/>', 
								'<%= defaultLocale.toString() %>',
								'<%= locale.toString() %>',
								<%= jsonLocales.toJSONString() %> );
	
	SX.DataStructure.FORM_RENDER_URL =  '<%= renderTermResourceCommandURL.toString() %>';
	let dataStructure = SX.newDataStructure();
	
	let currentTerm = null;
	
	let setCurrentTerm = function( term, previewed ){
		currentTerm = term;
		dataStructure.replaceVisibleTypeSpecificSection( currentTerm.termType );
		currentTerm.setAllFormValues();
		
		if( previewed ){
			dataStructure.disable(['add', 'btnClear', 'termType'], true);
			/*
			$('#<portlet:namespace/>add').prop('disabled', true);
			$('#<portlet:namespace/>btnClear').prop('disabled', true);
			*/
		}
		else{
			dataStructure.setSelectedTerm( null );
			dataStructure.disable(['add', 'btnClear', 'termType'], false);
			/*
			$('#<portlet:namespace/>add').prop('disabled', false);
			$('#<portlet:namespace/>btnClear').prop('disabled', false);
			*/
		}
		
	};
	
	let hasDataStructure = <%= hasDataStructure %>;

	if( hasDataStructure ){
		
	}
	else{
		
	}
	
	setCurrentTerm( dataStructure.createTerm( $('#<portlet:namespace/>termType').val() ), false );
	
	/**************************************************************
	* Change Event handlers for form controls 
	***************************************************************/
	$('#<portlet:namespace/>termDelimiter').change(function(eventObj){
			dataStructure.getTermDelimiterFormValue( true );
	});

	$('#<portlet:namespace/>termDelimiterPosition').change(function(eventObj){
			dataStructure.getTermDelimiterPositionFormValue( true );
	});
	
	$('#<portlet:namespace/>termValueDelimiter').change(function(eventObj){
			dataStructure.getTermValueDelimiterFormValue( true );
	});

	$('#<portlet:namespace/>matrixBracketType').change(function(eventObj){
			dataStructure.getMatrixBracketTypeFormValue( true );
	});
	
	$('#<portlet:namespace/>matrixElementDelimiter').change(function(eventObj){
			dataStructure.getMatrixElementDelimiterFormValue( true );
	});

	$('#<portlet:namespace/>commentChar').change(function(eventObj){
			dataStructure.getCommentCharFormValue( true );
	});
	
	$('#<portlet:namespace/>termType').change(function(eventObj){
		let selectedTermType = currentTerm.getTermTypeFormValue();
		
		console.log( 'Changed type: '+selectedTermType );
		if( selectedTermType === currentTerm.termType ){
			// Do nothing
			return;
		}
		
		if( dataStructure.previewed( currentTerm ) ){
			$.alert({
				title: '<liferay-ui:message key="term-type-change-alert"/>',
				content: 'how-to-term-type-change'
			});
			
			setCurrentTerm( currentTerm, true );
		}
		else{
			setCurrentTerm( dataStructure.createTerm( selectedTermType ), false );
		}
	});
	
	$('#<portlet:namespace/>termName').change(function(eventObj){
		if( dataStructure.previewed( currentTerm ) ){
			// It means the current term is one of the data structure and previewed on the preview panel.
			// Therefore, we must confirm that the term's name be changed and change preview.
			$.confirm({
				title: '<liferay-ui:message key="select-term-type" />',
				content: '<liferay-ui:message key="this-term-is-previewed-are-you-sure-to-change-the-name-of-the-term" />',
				type: 'orange',
				typeAnimated: true,
				buttons:{
					ok: {
						text: 'OK',
						btnClass: 'btn-blue',
						action: function(){
							let changedName = currentTerm.getTermNameFormValue();
							if( dataStructure.exist( changedName ) ){
								$.alert( changedName + 'already exist. Should be changed another name.' );
								currentTerm.setTermNameFormValue();
							}
							else{
								if( currentTerm.validateNameExpression( changedName ) === true ){
									currentTerm.termName = changedName;
									
									dataStructure.refreshSelectedTermPreview();
								}
								else{
									$.alert( 'Term Name[' + changedName +'] is unvalid. Try another one.');
									currentTerm.setTermNameFormValue();
								}
							} 
						}
					},
					cancel: function(){
						currentTerm.setTermNameFormValue();
					}
				},
				draggable: true
			}); 
		}
		else{
			currentTerm.getTermNameFormValue( true );
		}
	});

	$('#<portlet:namespace/>termVersion').change(function(eventObj){
		const changedVersion = currentTerm.getTermVersionFormValue();
		
		let validated;
		if( dataStructure.previewed( currentTerm ) ){
			validated = Term.validateTermVersion( changedVersion, currentTerm.termVersion );
		}
		else{
			validated = SX.Term.validateTermVersion( changedVersion );
		}
		
		if( validated === true ){
			currentTerm.termVersion = changedVersion;
		}
		else{
			$.alert( changedVersion + ' ' + validated );
			currentTerm.setTermVersionFormValue();
		} 
	});

	$('#<portlet:namespace/>termDisplayName').change(function(eventObj){
		currentTerm.getDisplayNameFormValue(true);
	
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>termDefinition').change(function(eventObj){
		currentTerm.getDefinitionFormValue(true);
	});

	$('#<portlet:namespace/>termTooltip').change(function(eventObj){
		currentTerm.getTooltipFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>placeHolder').change(function(eventObj){
		currentTerm.getPlaceHolderFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>synonyms').change(function(eventObj){
		currentTerm.getSynonymsFormValue(true);
	});
	
	$('#<portlet:namespace/>mandatory').change(function(eventObj){
		currentTerm.getMandatoryFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>value').change(function(eventObj){
		currentTerm.getValueFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>minLength').change(function(eventObj){
		const changedValue = Number( currentTerm.getMinLengthFormValue() );
		console.log( 'Changed number: '+changedValue );
		if( isNaN( changedValue ) || changedValue <= 0){
			$.alert('Minimum length should be an interger larger than 0.');
			currentTerm.setMinLengthFormValue()
		}
		else{
			currentTerm.minLength = changedValue;
			if( dataStructure.previewed( currentTerm ) ){
				dataStructure.refreshSelectedTermPreview();
			}
		}
	});
	
	$('#<portlet:namespace/>maxLength').change(function(eventObj){
		const minLength = currentTerm.getMinLengthFormValue();
		const maxLength = currentTerm.getMaxLengthFormValue();
		if( maxLength < minLength ){
			$.alert('Maximum length should be larger than minimum length.');
			currentTerm.setMaxLengthFormValue();
		}
		else{
			currentTerm.getMaxLengthFormValue(true);
			if( dataStructure.previewed( currentTerm ) ){
				dataStructure.refreshSelectedTermPreview();
			}
		}
	});

	$('#<portlet:namespace/>multipleLine').change(function(eventObj){
		currentTerm.getMultipleLineFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>validationRule').change(function(eventObj){
		currentTerm.getValidationRuleFormValue(true);
	});
	
	$('#<portlet:namespace/>minValue').change(function(eventObj){
		const preValue = currentTerm.minValue;
	
		currentTerm.getMinValueFormValue(true);
		
		if( !currentTerm.minValue ){
			currentTerm.setMinBoundaryFormValue();
			dataStructure.disable(['minBoundary'], true);
			//$('#<portlet:namespace/>minBoundary').prop('disabled', true);
		}
		else{
			dataStructure.disable(['minBoundary'], false);
			//$('#<portlet:namespace/>minBoundary').prop('disabled', false);
		}
		
		if( (!preValue !== !currentTerm.minValue) && dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>minBoundary').change(function(eventObj){
		currentTerm.getMinBoundaryFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>maxValue').change(function(eventObj){
		const preValue = currentTerm.maxValue;
		
		currentTerm.getMaxValueFormValue(true);
		
		if( !currentTerm.maxValue ){
			currentTerm.setMaxBoundaryFormValue();
			dataStructure.disable(['maxBoundary'], true);
//			$('#<portlet:namespace/>maxBoundary').prop('disabled', true);
		}
		else{
			dataStructure.disable(['maxBoundary'], false);
//			$('#<portlet:namespace/>maxBoundary').prop('disabled', false);
		}
		
		if( (!preValue !== !currentTerm.maxValue) && dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>maxBoundary').change(function(eventObj){
		currentTerm.getMaxBoundaryFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>unit').change(function(eventObj){
		currentTerm.getUnitFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>uncertainty').change(function(eventObj){
		currentTerm.getUncertaintyFormValue(true);
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});

	$('#<portlet:namespace/>sweepable').change(function(eventObj){
		currentTerm.getSweepableFormValue(true);
	});
	
	$('input[name="<portlet:namespace/>listDisplayStyle"]').change(function(eventObj){
		currentTerm.getDisplayStyleFormValue(true);
		
		if( currentTerm.displayStyle === SX.SXConstants.DISPLAY_STYLE_CHECK ){
			currentTerm.configureMultipleSeletionMode( true );
		}
		else{
			currentTerm.configureMultipleSeletionMode( false );
		}
		
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	SX.ListTerm.$OPTION_LABEL.change(function(event){
		let labelMap = currentTerm.getOptionLabelFormValue();
		if( Object.keys(labelMap).length === 0 ){
			$.alert('<liferay-ui:message key="option-label-required"/>');
			currentTerm.setOptionLabelFormValue();
			SX.ListTerm.$OPTION_LABEL.focus();
			
			return;
		}
		
		currentTerm.setOptionLabelMap( labelMap );
		
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	SX.ListTerm.$OPTION_VALUE.change(function(event){
		let value = currentTerm.getOptionValueFormValue();
		if( !value ){
			$.alert('<liferay-ui:message key="option-label-required"/>');
			currentTerm.setOptionValueFormValue();
			SX.ListTerm.$OPTION_VALUE.focus();
			
			return;
		}
		
		currentTerm.setOptionValue( value );
		
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	SX.ListTerm.$OPTION_SELECTED.change(function(event){
		let value = currentTerm.getOptionSelectedFormValue();
		
		currentTerm.setOptionSelected( value );
		
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	SX.ListTerm.$OPTION_ACTIVE_TERMS.change(function(event){
		let activeTermNames = currentTerm.getActiveTermsFormValue();
		
		currentTerm.setActiveTerms( activeTermNames );
		
		console.log('active terms: ', activeTermNames);
	});


	/**************************************************************
	* Custom Liferay event handlers
	**************************************************************/
	
	Liferay.on(SX.SXIcecapEvents.DATATYPE_PREVIEW_TERM_DELETED, function(eventData){
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.removeTerm( eventData.deletedTerm.termName );
		
		dataStructure.render( SX.SXConstants.FOR_PREVIEW );
	});
	
	Liferay.on(SX.SXIcecapEvents.DATATYPE_PREVIEW_TERM_SELECTED, function(eventData){
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		if( dataStructure.selectedTerm === eventData.selectedTerm ){
			return;
		}
		
		dataStructure.selectedTerm = eventData.selectedTerm;
		setCurrentTerm( eventData.selectedTerm, true );
	});

	
	Liferay.on( SX.SXIcecapEvents.LIST_OPTION_PREVIEW_REMOVED, function( eventData ){
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}

		let removedOption = eventData.removedOption;

		currentTerm.removeOption( removedOption.value );
		
		dataStructure.render( SX.SXConstants.FOR_PREVIEW );
	});

	Liferay.on( SX.SXIcecapEvents.LIST_OPTION_PREVIEW_SELECTED, function( eventData ){
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}

		currentTerm.initOptionFormValues( eventData.highlightedOption );
		currentTerm.highlightOptionPreview(); 
	});
	
	Liferay.on( SX.SXIcecapEvents.DATATYPE_FORM_UI_SHOW_TERMS, function( eventData ){
		console.log( 'SX.SXIcecapEvents.DATATYPE_FORM_UI_SHOW_TERMS received...', eventData);
		
		if( eventData.targetPortlet !== '<portlet:namespace/>' ){
			return;
		}
		
		dataStructure.activateDependentTerms( eventData.termName, eventData.optionValue, SX.SXConstants.FOR_PREVIEW );
	});


	/*******************************************************************************
	* Event handlers for buttons
	*******************************************************************************/
	$('#<portlet:namespace/>btnNewTerm').click(function(){
		$.confirm({
			title: '<liferay-ui:message key="select-term-type" />',
			content: $('#<portlet:namespace/>termTypeSelectorDlg' ).html(),
			type: 'orange',
			typeAnimated: true,
			buttons:{
				ok: {
					text: 'OK',
					btnClass: 'btn-blue',
					action: function(){
						setCurrentTerm( dataStructure.createTerm( $('#<portlet:namespace/>dlgTermType').val() ), false );
					}
				},
				cancel: function(){
					
				}
			},
			draggable: true
		});
	});

	$('#<portlet:namespace/>btnCopyTerm').click(function(){
		setCurrentTerm( dataStructure.copyTerm( currentTerm ), false );
	});
	
	$('#<portlet:namespace/>btnClear').click(function(){
		currentTerm.initAllFormValues();
	});

	$('#<portlet:namespace/>btnImportTerm').click(function(){
		
	});
	
	SX.ListTerm.$BTN_NEW_OPTION.click(function(){
		currentTerm.initOptionFormValues();
		dataStructure.disable(['btnAddOption'], false);

		
		/*
		console.log($('#<portlet:namespace/>optionManagementDlg' ).html());
		$.confirm({
			title: '<liferay-ui:message key="define-new-option" />',
			content: $('#<portlet:namespace/>optionManagementDlg' ).html(),
			type: 'orange',
			typeAnimated: true,
			columnClass: 'medium',
			buttons:{
				ok: {
					text: '<liferay-ui:message key="add"/>',
					btnClass: 'btn-blue',
					action: function(){
						let labelMap = currentTerm.getOptionLabelFormValue();
						console.log( 'labelMap: ', $('#<portlet:namespace/>optionLabel').val() );
						if( Object.keys(labelMap).length === 0 ){
							$.alert('<liferay-ui:message key="option-label-cannot-be-empty"/>');
							$('#<portlet:namespace/>optionLabel').focus();
							return false;
						}
					}
				},
				cancel: function(){
					
				}
			},
			draggable: true
		});
		*/
		
	});
	
	$('#<portlet:namespace/>btnAddOption').click(function(event){
		currentTerm.addOption();
		dataStructure.disable(['btnAddOption'], true);
		
		if( dataStructure.previewed( currentTerm ) ){
			dataStructure.refreshSelectedTermPreview();
		}
	});
	
	$('#<portlet:namespace/>add').click(function(){
		/*
		$.ajax({
			url: '<%= renderTermResourceCommandURL.toString() %>',
			method: 'post',
			dataType: 'text',
			data: {
				<portlet:namespace/>termType: currentTerm.termType,
				<portlet:namespace/>mandatory: currentTerm.mandatory,
				<portlet:namespace/>displayName: currentTerm.displayName.localizedMap['<%= locale.toString() %>'],
				<portlet:namespace/>tooltip: currentTerm.tooltip.localizedMap['<%= locale.toString() %>']
			},
			success: function( result ){
				console.log( result );
			},
			error: function(){
				console.log('error');
			}
		});
		*/
		
		if( dataStructure.addTerm( currentTerm, true ) ){
			dataStructure.disable(['add', 'btnClear', 'termType'], true);
			/*
			$('#<portlet:namespace/>add').prop('disabled', true);
			$('#<portlet:namespace/>btnClear').prop('disabled', true);
			*/
		}
		
		console.log('currentTerm: ' + JSON.stringify( currentTerm, null, 4 ), currentTerm );
	});
	
	$('#<portlet:namespace/>btnRefresh').click(function(event){
		dataStructure.render(SX.SXConstants.FOR_PREVIEW);
	});
});
</script>
